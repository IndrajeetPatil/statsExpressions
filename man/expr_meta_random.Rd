% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/meta_random.R
\name{expr_meta_random}
\alias{expr_meta_random}
\title{Expression and dataframe for random-effects meta-analysis}
\usage{
expr_meta_random(
  data,
  type = "parametric",
  random = "mixture",
  k = 2L,
  conf.level = 0.95,
  top.text = NULL,
  output = "expression",
  ...
)
}
\arguments{
\item{data}{A dataframe. It \strong{must} contain columns named \code{estimate} (effect
sizes or outcomes)  and \code{std.error} (corresponding standard errors). These
two columns will be used for \code{yi}  and \code{sei} arguments in \code{metafor::rma}
(for parametric analysis) or \code{metaplus::metaplus} (for robust analysis),
and for \code{y} and \code{SE} arguments in \code{metaBMA::meta_random} (for Bayesian
analysis).}

\item{type}{Type of statistic expected (\code{"parametric"} or \code{"nonparametric"}
or \code{"robust"} or \code{"bayes"}).Corresponding abbreviations are also accepted:
\code{"p"} (for parametric), \code{"np"} (nonparametric), \code{"r"} (robust), or
\code{"bf"}resp.}

\item{random}{
The type of random effects distribution. One of "normal","t-dist","mixture", for standard normal, \eqn{t}-distribution or mixture of normals respectively.
}

\item{k}{Number of digits after decimal point (should be an integer)
(Default: \code{k = 2L}).}

\item{conf.level}{Confidence/Credible Interval (CI) level. Default to \code{0.95}
(\verb{95\%}).}

\item{top.text}{Text to display on top of the Bayes Factor message. This is
mostly relevant in the context of \code{ggstatsplot} functions.}

\item{output}{If \code{"expression"}, will return expression with statistical
details, while \code{"dataframe"} will return a dataframe containing the
results.}

\item{...}{Additional arguments passed to the respective meta-analysis
function.}
}
\description{
Expression and dataframe for random-effects meta-analysis
}
\note{
\strong{Important}: The function assumes that you have already downloaded
the needed package (\code{metafor}, \code{metaplus}, or \code{metaBMA}) for meta-analysis.
}
\examples{
\donttest{
# run examples only if the needed packages are available
if (all(unlist(lapply(
  c("metaplus", "metafor", "metaBMA"), # needed packages
  require,
  character.only = TRUE,
  quietly = TRUE,
  warn.conflicts = FALSE
)))) {
  # note that the `print` calls below are not necessary for you to write
  # they are in the documentation so that the website renders them

  # setup
  set.seed(123)
  library(statsExpressions)

  # renaming to what `statsExpressions` expects
  df <- dplyr::rename(mag, estimate = yi, std.error = sei)

  # ----------------------- parametric ---------------------------------------

  # creating expression
  print(expr_meta_random(data = df, output = "dataframe"))

  # ----------------------- random -----------------------------------------

  # creating expression
  print(expr_meta_random(
    data = df,
    type = "random",
    random = "normal",
    output = "dataframe"
  ))

  # ----------------------- Bayes Factor -----------------------------------

  # making expression
  expr_meta_random(
    data = df,
    type = "bayes",
    output = "dataframe",
    # additional arguments given to `metaBMA`
    iter = 5000,
    summarize = "integrate",
    control = list(adapt_delta = 0.99, max_treedepth = 15)
  )
}
}
}
